1.包装类：八种基本类型6种都是手写字母大写，如boolean的包装类是Boolean
	包装类的作用是使一个基本数据类型转化成一个类，有了类的特点，可以调用类的方法
	int是Integer   Integer i = new Integer("1");（装箱） int i0= i.intValue();（拆箱）通过包装类的构造器实现，里面的数据类型要对应，不然编译不报错，运行报错
	char是Character	Character c ='a';（jdk1.5后 自动装箱），char c0=c;（自动拆箱）
2.包装类的作用主要是两者相互转化
	字符串转化为基础数据类型
	int i = Integer.parseInt("123");
	float f = Float.parseFloat("12.22");就是包装类.parse数据类型方法
	基本类型转字符串
	String stri = String.valueOf(i);String strf = String.valueOf(f);这个方法名都是一样的
	String stri = 5+"";这种就是两个不同的类型，计算时会转化成相对更大的数据类型
3.直接打印对象的话和toString方法一样，打印对象在堆中的地址。
4.static，在类中加这个就是类变量，直接类名.属性使用，属于类的一部分，被这个类的所有实例共享，也叫静态变量
	实例变量只能在实例化后使用，属于实例化对象的一部分，不能共用
	方法也可以用static修饰，与属性使用类似，不因对象不同而频繁通过new调用,在static类中只能访问static变量
	static方法中不能使用this或super，因为它们是针对对象
5.单例设计模式（对象只能new一次，只会存在一个实例对象，用于new对象比较麻烦或者没必要new多个对象）
	饿汉模式：建立一个无参的私有构造函数（这样就不能通过new来创建对象了），建立一个该类类型的私有的静态变量并new一个对象赋值给它，然后建立一个公有的静态函数返回这个变量。无论调用多少次，只会调用到类初始化的那个对象，饿汉就是做一盘菜，后面来多少人都吃这一种菜
	懒汉模式：建立一个无参的私有构造函数（这样就不能通过new来创建对象了），建立一个该类类型的私有的静态变量，然后建立一个公有的静态函数判断该变量是否为null，是的话new一个对象赋值给变量，返回这个变量。无论调用多少次，只会调用到第一次访问初始化的那个对象，懒汉就是第一个人来了点一种菜，后面来多少人都吃这一种菜
6.理解main方法
	因为该方法权限必须是public,因为java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static,该方法接收一个String数组，该数组保存执行java命令时传递给所运行的类的参数（java class文件名 参数1 参数2 参数3）
7.代码块{}分为静态代码块和非静态代码块，在执行构造函数前面执行
	静态代码块只会执行一次，只使用静态属性和方法，静态代码块的执行要先于非静态代码块
	非静态代码块可以调用静态和非静态方法和属性，每次创建对象时都会执行一次且先于构造器
	用处：用于在匿名内部类更改类的属性和方法（因为匿名无法通过new来创建对象从而调用或更改）
8.final修饰的类不能被继承，方法不能重写，变量必须在定义时赋值且不能改变（常量）
9.abstract（作为一种多个子类的通用模板类的形式存在） 修饰类时叫抽象类：不能被实例化，是用来作为父类被继承的，抽象类的子类必须重写父类的抽象方法，并提供方法体(具体逻辑)。
	如果类中有一个抽象方法，就必须声明为抽象类，抽象类不能被实例化！！！
	修饰方法被称为抽象方法：只有方法的声明，没有方法的实现，以分号结束 :abstract int 方法名();