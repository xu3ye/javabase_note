1.多线程
	同步：就是并行执行，互不干涉
	异步：执行完了才执行下一个这种
	第一种创建线程的方式：继承Thread类
		定义子类继承Thread类：public class Thread_test extends Thread{}
		重写Thread类中的run方法类
		创建Thread子类对象，即创建线程对象：Thread th = new Thread_test();
		调用线程对象start方法：启动线程，调用run方法
	第二种创建线程的方式：实现Runnable接口
		定义子类，实现Runnable接口：public class Runnable_test implements Runnable{}
		子类中重写Runnable接口中的run方法
		通过Thread类含参构造器创建线程对象：Thread t1 = new Thread(new Runnable_test(),"线程名称：");
		将Runnable接口的子类对象作为实际参数传递给Thread类的构造方法中
		调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法
		注：Thread.currentThread().getName()获取线程名称参数
	区别：继承类方法代码放到Thread子类的run方法中
		  实现接口线程代码存放在接口的子类的run方法中
		  一般使用实现接口方式，因为可以同享一个接口实现类的对象，非常适合多个相同线程来处理同一份资源
	void start():启动线程，并执行对象的run()方法
	String getName():返回线程的名称
	void setName(String name):设置该线程名称
	static currentThread()返回当前线程
2.线程优先级：用数组1-10表示，数字越大优先级越高，越高有较高概率被执行，没有设置默认是5
	getPriority():返回线程优先值
	setPriority(int newPriority):改变线程优先级
	线程创建时继承父线程优先级
3.有关方法
	static void yield():线程让步，把执行机会让给优先级相同或者更高的，若没有就会忽略此方法
	join(),当前前程被阻塞，直到jion线程执行完为止
	static void sleep(long millis):参数，毫秒，阻塞当前线程时长
	stop():强制线程结束
	boolean isAlive():返回boolean,判断线程是还活着