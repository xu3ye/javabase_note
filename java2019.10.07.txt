1.接口(interface定义)关键字：implements实现 ,因为java不支持多重继承，接口是抽象方法和常量的定义的集合，是一种特殊的抽象类
	与抽象类的区别：当需要对一类事物进行抽象的时候使用抽象类，好形成一个父类。当需要需要对乙烯类动作进行抽象使用接口，需要使用这些动作的类就去实现这些接口
	接口中所有成员变量默认public static final修饰，可以省略不写，成员方法默认使用public abstract修饰，也可以省略，接口没有构造器
	接口可以继承接口，如果类中没有实现全部方方法，需要定义成抽象类。先继承再实现接口。可以实现多个接口，用逗号分隔
	与继承关系类似，接口与实现类存在多态性，接口主要作用就是被实现类实现(面向接口编程)
2.工厂模式：就是两者的工作改动互不影响，用接口接收相应方法返回的对象，这样更改类名另一个人就无需改代码，因为调用方法才实现对象，方法是需要改代码的人写的
			主要hi对象创建的时机，通过面向对象的方法将要创建具体对象的创建工作延迟到子类
3.类的5个成员：属性，方法，构造器，代码块，内部类
4.内部类：主要解决多重继承的问题，就是在类中写多个内部类继承不同的类，然后在外部类访问。(匿名内部类)
	可以声明为final,可以声明为private或protected,可以声明为static（非static的内部类中的成员不能声明为static），但就不能使用外部类的非static成员了，可以作为抽象类abstract被其他类继承
5.异常Exception(文件读写时的错，运行时报的错)和error(内存溢出，栈溢出)
6.异常处理(把容易产生异常的代码放在一起处理)：抓抛模型
	捕获异常（catch）：try{}catch(Exception e（异常的类型，不知时什么异常，可以写所有异常的父类Exception）){}finally{}
		e.printStackTrace();跟踪异常事件发生时执行堆栈的内容			e.getMessage()输出异常中包含的信息
		finally可写可不写，是否异常都一定会执行
		可以用多个catch捕获多个异常
	抛出异常（throws）：public void test() throws Exception {}，可以先抛出异常，在调用方法中处理，main()方法抛出异常时到虚拟机了，不能处理
		子类重写父类方法时子类不能抛出比父类更大范围的异常
		throw new Exception("不在范围内");//人工手动抛出异常
7.可以自定义异常类，不过必须继承现有异常类（如Exception）